image: python:3.8-slim

stages:
  - lint
  - build
  - test
  - test_e2e
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

code_format:
  stage: lint
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements-dev.txt
  script:
    - yapf -d -r mse_ctl/

code_style:
  stage: lint
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'

  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install .
  script:
    - pycodestyle mse_ctl/

doc_style:
  stage: lint
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'

  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install .
  script:
    - pydocstyle mse_ctl/

static_analysis:
  stage: lint
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install .
  script:
    - pylint --rcfile=setup.cfg mse_ctl/

type_check:
  stage: lint
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install .
  script:
    - mypy mse_ctl/

test_unit:
  stage: test
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  before_script:
    - python3 --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install .
  script:
    - pytest -m "not slow"

test_e2e:
  extends: .test_e2e_template
  rules:
    # Only run on merge requests and schedule jobs
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
      when: manual
  variables:
    # The job is manual, so if you set the variable in the gitlab UI, it will override that one
    BASE_URL: "https://ci.backend.dev.mse.cosmian.com"
    AUTH0_CLIENT_ID: "bx2WlLrS7qr35iyNqUVTs9jMo834o8mC"
    AUTH0_DOMAIN_NAME: "https://console-dev.eu.auth0.com"
    AUTH0_AUDIENCE: "https://console-dev.eu.auth0.com/api/v2/"
    REFRESH_TOKEN: ${DEV_ALICE_REFRESH_TOKEN}

test_e2e_scheduled:
  extends: .test_e2e_template
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  variables:
    # The job is manual, so if you set the variable in the gitlab UI, it will override that one
    BASE_URL: "https://backend.staging.mse.cosmian.com"
    AUTH0_CLIENT_ID: "Vm94ZbQn7fFpf5IbA6511S8yp3DQeau2"
    AUTH0_DOMAIN_NAME: "https://mse-console-test.eu.auth0.com"
    AUTH0_AUDIENCE: "https://mse-console-test.eu.auth0.com/api/v2/"
    REFRESH_TOKEN: ${STAGING_ALICE_REFRESH_TOKEN}

.test_e2e_template:
  stage: test_e2e
  # This job has the shell tag because it runs dockers
  tags: [shell]
  allow_failure: false
  before_script:
    - python3 --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install .
    - CONF_TMP_DIR=$(mktemp -d)
    - echo 'email = "alice@cosmian.com"' > ${CONF_TMP_DIR}/login.toml
    - echo "refresh_token = \"${REFRESH_TOKEN}\"" >> ${CONF_TMP_DIR}/login.toml
  script:
    - echo "Running tests using ${BASE_URL}"
    - >
      MSE_CTL_CONF_PATH=${CONF_TMP_DIR} 
      MSE_CTL_BASE_URL=${BASE_URL}
      MSE_CTL_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      MSE_CTL_AUTH0_DOMAIN_NAME=${AUTH0_DOMAIN_NAME}
      MSE_CTL_AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      pytest -m slow
  after_script:
    - rm -f $CONF_TMP_DIR

release_wheel:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+(\.\d+)?([\.\-\_])?((a(lpha)?|b(eta)?|c|r(c|ev)?|pre(view)?)\d*)?(\.?(post|dev)\d*)?$/
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install build twine
  script:
    - |
      if [ "$(python setup.py --version)" == "$CI_COMMIT_TAG" ]
      then
          python -m build --wheel && twine upload -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}" dist/*
      else
          echo "Git tag version should be the same as in setup.py!"
          exit 1
      fi
  artifacts:
    paths:
      - dist/*.whl

# Triggers public_documentation to rebuild the doc
documentation:
  image: alpine:3.16
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_PIPELINE_SOURCE != 'schedule'
  before_script:
    - echo $CI_COMMIT_BRANCH
    - apk add --update curl
  script:
    - curl --request POST --form token=$CI_JOB_TOKEN --form ref=$CI_COMMIT_BRANCH http://gitlab.cosmian.com/api/v4/projects/95/trigger/pipeline
